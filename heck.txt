diff --git a/build.gradle b/build.gradle
index fb09fda..c452daf 100755
--- a/build.gradle
+++ b/build.gradle
@@ -2,7 +2,7 @@ import edu.wpi.first.gradlerio.deploy.roborio.RoboRIO
 
 plugins {
     id "java"
-    id "edu.wpi.first.GradleRIO" version "2023.4.1"
+    id "edu.wpi.first.GradleRIO" version "2023.4.2"
     id "idea"
 }
 
diff --git a/src/main/java/frc/robot/Constants.java b/src/main/java/frc/robot/Constants.java
index df46cbd..8f48bb0 100755
--- a/src/main/java/frc/robot/Constants.java
+++ b/src/main/java/frc/robot/Constants.java
@@ -15,7 +15,7 @@ package frc.robot;
  */
 public final class Constants {
   public static class Drivetrain {
-    public static final double DEADBAND = 0.02;
+    public static final double DEADBAND = 0.15;
     public static final double WHEEL_TURN_GAIN = 12.0;
     public static final double WHEEL_NONLINEARITY = 0.05;
     public static final double TRACK_WIDTH_INCHES = 17.5;
@@ -33,9 +33,11 @@ public final class Constants {
 
     // Set the current limit, an integer in amps, for the drivetrain.
     public static final boolean ENABLE_CURRENT_LIMIT = true;
-    public static final int CURRENT_LIMIT = 50;
+    public static final int CURRENT_LIMIT = 40;
 
     public static final double ARM_EXTENDED_TURN_MULTIPLIER = 0.5;
+    public static final double CHARGE_STATION_PITCH = 10;
+    public static final double LEVEL_PITCH = 2;
 
     public static class Feedforward {
       public static class Left {
@@ -57,7 +59,7 @@ public final class Constants {
       public static final double HIGH_NODE = 0.803;
 
       //      public static final double HIGH_NODE = 0.643;
-      public static final double FLOOR = -0.937;
+      public static final double FLOOR = -1.0;
       public static final double STOW = 3.854;
       public static final double MID_NODE = 0.275;
     }
@@ -71,7 +73,7 @@ public final class Constants {
     public static final double kV = 0.0;
     public static final double kA = 0.0;
 
-    public static final double READY_DEADZONE = 0.05;
+    public static final double READY_DEADZONE = 0.025;
     public static final double FAULT_DEADZONE = 0.25;
 
     public static final double POSITION_CONVERSION = Constants.Units.RADIANS_PER_ROTATION / 100.0;
@@ -83,11 +85,11 @@ public final class Constants {
 
   public static class IntakeConstants {
     public static final int INTAKE_CURRENT_LIMIT_AMPS = 30;
-    public static final int HOLD_CURRENT_LIMIT_AMPS = 5;
+    public static final int HOLD_CURRENT_LIMIT_AMPS = 8;
     public static final double INTAKE_CONE_VOLTS = 12.0;
     public static final double INTAKE_CUBE_VOLTS = -8.0;
-    public static final double HOLD_CONE_VOLTS = 2.0;
-    public static final double HOLD_CUBE_VOLTS = -2.0;
+    public static final double HOLD_CONE_VOLTS = 3.0;
+    public static final double HOLD_CUBE_VOLTS = -3.0;
     public static final double THROW_CONE_VOLTS = -8.0;
     public static final double THROW_CUBE_VOLTS = 8.0;
     public static final double OFF = 0.0;
diff --git a/src/main/java/frc/robot/subsystems/Drivetrain.java b/src/main/java/frc/robot/subsystems/Drivetrain.java
index aa986a5..53903ea 100644
--- a/src/main/java/frc/robot/subsystems/Drivetrain.java
+++ b/src/main/java/frc/robot/subsystems/Drivetrain.java
@@ -10,6 +10,8 @@ import edu.wpi.first.math.kinematics.ChassisSpeeds;
 import edu.wpi.first.math.kinematics.DifferentialDriveKinematics;
 import edu.wpi.first.math.kinematics.DifferentialDriveWheelSpeeds;
 import edu.wpi.first.wpilibj.motorcontrol.MotorControllerGroup;
+import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
+import edu.wpi.first.wpilibj2.command.CommandBase;
 import edu.wpi.first.wpilibj2.command.SubsystemBase;
 import frc.robot.Constants;
 import org.jetbrains.annotations.NotNull;
@@ -17,9 +19,10 @@ import org.jetbrains.annotations.NotNull;
 public class Drivetrain extends SubsystemBase {
   private static Drivetrain instance;
 
-  private final PigeonIMU gyro = new PigeonIMU(1);
+  private final PigeonIMU gyro = new PigeonIMU(10);
 
-  private final DifferentialDriveKinematics kinematics = new DifferentialDriveKinematics(Constants.Drivetrain.TRACK_WIDTH_METERS);
+  private final DifferentialDriveKinematics kinematics = new DifferentialDriveKinematics(
+      Constants.Drivetrain.TRACK_WIDTH_METERS);
 
   private final CANSparkMax frontLeft = new CANSparkMax(15, CANSparkMaxLowLevel.MotorType.kBrushless);
   private final CANSparkMax frontRight = new CANSparkMax(14, CANSparkMaxLowLevel.MotorType.kBrushless);
@@ -32,11 +35,11 @@ public class Drivetrain extends SubsystemBase {
   private SimpleMotorFeedforward left_feedforward;
   private SimpleMotorFeedforward right_feedforward;
 
-
-
   private Drivetrain() {
-    this.left_feedforward = new SimpleMotorFeedforward(Constants.Drivetrain.Feedforward.Left.S, Constants.Drivetrain.Feedforward.Left.V, Constants.Drivetrain.Feedforward.Left.A);
-    this.right_feedforward = new SimpleMotorFeedforward(Constants.Drivetrain.Feedforward.Right.S, Constants.Drivetrain.Feedforward.Right.V, Constants.Drivetrain.Feedforward.Right.A);
+    this.left_feedforward = new SimpleMotorFeedforward(Constants.Drivetrain.Feedforward.Left.S,
+        Constants.Drivetrain.Feedforward.Left.V, Constants.Drivetrain.Feedforward.Left.A);
+    this.right_feedforward = new SimpleMotorFeedforward(Constants.Drivetrain.Feedforward.Right.S,
+        Constants.Drivetrain.Feedforward.Right.V, Constants.Drivetrain.Feedforward.Right.A);
 
     frontLeft.setIdleMode(CANSparkMax.IdleMode.kBrake);
     backLeft.setIdleMode(CANSparkMax.IdleMode.kBrake);
@@ -62,7 +65,9 @@ public class Drivetrain extends SubsystemBase {
   }
 
   public static Drivetrain getInstance() {
-    return frc.robot.subsystems.Drivetrain.instance == null ? frc.robot.subsystems.Drivetrain.instance = new Drivetrain() : frc.robot.subsystems.Drivetrain.instance;
+    return frc.robot.subsystems.Drivetrain.instance == null
+        ? frc.robot.subsystems.Drivetrain.instance = new Drivetrain()
+        : frc.robot.subsystems.Drivetrain.instance;
   }
 
   private final double kDenominator = Math.sin(Math.PI / 2.0 * Constants.Drivetrain.WHEEL_NONLINEARITY);
@@ -82,14 +87,42 @@ public class Drivetrain extends SubsystemBase {
 
     DifferentialDriveWheelSpeeds wheels = kinematics.toWheelSpeeds(new ChassisSpeeds(vx, 0.0, omega));
 
-
     setOpenLoopWheelSpeed(wheels);
   }
 
+  @Override
+  public void periodic() {
+    SmartDashboard.putNumber("drive position", this.getDriveDistance());
+    SmartDashboard.putNumber("drive pitch", this.getPitch());
+    SmartDashboard.putNumber("left drive volts", this.frontLeft.getAppliedOutput() * 12.0);
+    SmartDashboard.putNumber("right drive volts", this.frontRight.getAppliedOutput() * 12.0);
+  }
+
   public void setOpenLoopWheelSpeed(@NotNull DifferentialDriveWheelSpeeds speed) {
-//    leftVolts = ;
     left.setVoltage(left_feedforward.calculate(speed.leftMetersPerSecond));
     right.setVoltage(right_feedforward.calculate(speed.rightMetersPerSecond));
   }
-}
 
+  public double getDriveDistance() {
+    return (this.frontLeft.getEncoder().getPosition() + this.frontRight.getEncoder().getPosition()) / 2.0;
+  }
+
+  public double getPitch() {
+    return this.gyro.getRoll();
+  }
+
+  public CommandBase crawlDistance(double meters, double meters_per_second) {
+    return run(() -> this.setOpenLoopWheelSpeed(new DifferentialDriveWheelSpeeds(meters_per_second, meters_per_second)))
+        .until(() -> this.getDriveDistance() >= meters);
+  }
+
+  public CommandBase crawlUntilTilt(double meters_per_second) {
+    return run(() -> this.setOpenLoopWheelSpeed(new DifferentialDriveWheelSpeeds(meters_per_second, meters_per_second)))
+        .until(() -> Math.abs(this.getPitch()) >= Constants.Drivetrain.CHARGE_STATION_PITCH);
+  }
+
+  public CommandBase crawlUntilLevel(double meters_per_second) {
+    return run(() -> this.setOpenLoopWheelSpeed(new DifferentialDriveWheelSpeeds(meters_per_second, meters_per_second)))
+        .until(() -> Math.abs(this.getPitch()) <= Constants.Drivetrain.LEVEL_PITCH);
+  }
+}
diff --git a/vendordeps/PhotonLib-json-1.0.json b/vendordeps/PhotonLib-json-1.0.json
deleted file mode 100755
index d33d82c..0000000
--- a/vendordeps/PhotonLib-json-1.0.json
+++ /dev/null
@@ -1,41 +0,0 @@
-{
-  "fileName": "photonlib.json",
-  "name": "photonlib",
-  "version": "v2023.2.1",
-  "uuid": "515fe07e-bfc6-11fa-b3de-0242ac130004 ",
-  "mavenUrls": [
-    "https://maven.photonvision.org/repository/internal",
-    "https://maven.photonvision.org/repository/snapshots"
-  ],
-  "jsonUrl": "https://maven.photonvision.org/repository/internal/org/photonvision/PhotonLib-json/1.0/PhotonLib-json-1.0.json",
-  "jniDependencies": [],
-  "cppDependencies": [
-    {
-      "groupId": "org.photonvision",
-      "artifactId": "PhotonLib-cpp",
-      "version": "v2023.2.1",
-      "libName": "Photon",
-      "headerClassifier": "headers",
-      "sharedLibrary": true,
-      "skipInvalidPlatforms": true,
-      "binaryPlatforms": [
-        "windowsx86-64",
-        "linuxathena",
-        "linuxx86-64",
-        "osxuniversal"
-      ]
-    }
-  ],
-  "javaDependencies": [
-    {
-      "groupId": "org.photonvision",
-      "artifactId": "PhotonLib-java",
-      "version": "v2023.2.1"
-    },
-    {
-      "groupId": "org.photonvision",
-      "artifactId": "PhotonTargeting-java",
-      "version": "v2023.2.1"
-    }
-  ]
-}
